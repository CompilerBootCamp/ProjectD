var a1, a2, a3, a4, a5, a6, a7;
var b1 := 1, b2 := 2, b3 := 3, b4 := 4, b5 := 5;
a1 := ((2+2)*(4-3)/2);
a3 := false;
a4 := true;
a5 := a3 and a4;
a6 := a3 or a4;
a7 := not a3 and not a4;
a7 := not a3 and a4 or a5 xor not a3;
var tuple := {t1 := {tt1 := {5, 4, 3, 2, 1}, tt2, tt3}, t2, t3};
var tup := tuple.t1.tt1.1;
var tutuple := {a, b, c};
a3 := tup is int;
a3 := tup is real;
a3 := tup is bool;
a3 := tup is string;
a3 := tup is empty;
a3 := tup is [];
a3 := tup is func;
a3 := tup is {};
a4 := not a3;
a1 := -a1;
a1 := +a1;
a1 := -(3-4);
print ((2+2)*(4-3)/2), a3, a4;
var t := [];
t[10] := 25;
t[100] := func(x)=>x+1;
t[1000] := {a := 1, b := 2.7};
var newt := {a := 1, b := 2, c};
t := t + {d := 3};
var x := t.b;
var y1 := t.1;
var y2 := t.3;
var great := 3 > 4;
var less := 3 < 4;
var greateq := 3 >= 4;
var lesseq := 3 <= 4;
var eq := 4 = 4;
var array := [1, 2, 3];
var array2 := [a1, a2, a3];
var f := func(x) is x := x+1; print x end;
return f(1,2,3);
var test := a * d + b - c;
var logic_test := a and b and c and d or e and f or g xor i xor not h; 
print 1 * 2 + 3 - 4;
print true and true, false or false, false or true, false xor true, true xor true;
print '3privet';
print 3 >= 3;
print -(3-2);
print [];
print [2.4];
print [1,2,3,4,5];
print [1 - 2 + 3 * 4, true and true, 'privet5', -10];
print [[], [5,4], [0.4,0.5], [true], ['this', 'is', 'string'], [[69],[96]]];
print []+[];
print [1]+[];
print [] + [1];
print [1,2] + [3];
print [1 - 2 + 3 * 4, true and true, 'privet5', -10] + [1,2,3,4,5];
print [1] + [[1,2] + [3]];
